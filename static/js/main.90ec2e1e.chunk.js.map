{"version":3,"sources":["assets/img/spinner-dark.svg","redux/tasks/tasks.types.js","redux/tasks/tasks.reducer.js","redux/root-reducer.js","redux/tasks/tasks.actions.js","redux/tasks/tasks.sagas.js","redux/root-saga.js","redux/store.js","components/Footer/Footer.js","components/Button/Button.js","redux/tasks/tasks.selectors.js","icons/cross.js","icons/can.js","icons/pen.js","components/TaskTable/TaskTable.js","components/WithSpinner/Spinner.js","components/WithSpinner/WithSpinner.js","pages/Homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tasksActionTypes","FETCH_TASKS_START","FETCH_TASKS_SUCCESS","FETCH_TASKS_FAILURE","ADD_TASK_START","ADD_TASK_SUCCESS","ADD_TASK_FAILURE","INITIAL_STATE","isFetching","errorMessage","undefined","tasks","tasksReducer","state","action","type","payload","rootReducer","combineReducers","fetchTasksSuccess","data","fetchTasksFailure","err","addTaskSuccess","addTaskFailure","fetchTasksAsync","fetchTasksStart","addTaskAsync","addTaskStart","tasksSagas","fetch","response","json","console","log","put","message","takeLatest","task","all","call","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","Footer","className","Button","onClick","text","view","selectTasks","selectTasksItems","createSelector","selectTasksFetching","Cross","color","xmlns","width","height","d","Can","version","id","x","y","xmlSpace","Pen","fill","TaskTable","useSelector","map","i","key","title","Spinner","style","textAlign","src","SpinnerImg","alt","WithSpinner","WrappedComponent","isLoading","otherProps","Homepage","dispatch","useDispatch","TaskTableWithSpinner","useEffect","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90ec2e1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner-dark.b9a0116b.svg\";","export const tasksActionTypes = {\n    FETCH_TASKS_START: 'FETCH_TASKS_START',\n    FETCH_TASKS_SUCCESS: 'FETCH_TASKS_SUCCESS',\n    FETCH_TASKS_FAILURE: 'FETCH_TASKS_FAILURE',\n\n    ADD_TASK_START: 'ADD_TASK_START',\n    ADD_TASK_SUCCESS: 'ADD_TASK_SUCCESS',\n    ADD_TASK_FAILURE: 'ADD_TASK_FAILURE',\n};","import {tasksActionTypes} from './tasks.types';\n\nconst INITIAL_STATE = {\n    isFetching: false,\n    errorMessage: undefined,\n    tasks: []\n};\n\nconst tasksReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n    case tasksActionTypes.FETCH_TASKS_START:\n        return {...state, isFetching: true};\n    case tasksActionTypes.FETCH_TASKS_SUCCESS:\n        return {\n            ...state,\n            tasks: action.payload,\n            isFetching: false\n        };\n    case tasksActionTypes.ADD_TASK_START:\n        return {...state, isFetching: true};\n    case tasksActionTypes.ADD_TASK_SUCCESS:\n        return {...state, isFetching: false};\n\n    case tasksActionTypes.FETCH_TASKS_FAILURE:\n    case tasksActionTypes.ADD_TASK_FAILURE:\n        return {\n            ...state,\n            errorMessage: action.payload,\n            isFetching: false\n        };\n    default:\n        return state;\n    }\n};\n\nexport default tasksReducer;","import {combineReducers} from 'redux';\nimport tasksReducer from './tasks/tasks.reducer';\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n\n});\n\nexport default rootReducer;","import {tasksActionTypes} from './tasks.types';\n\nexport const fetchTasksStart = () => ({\n    type: tasksActionTypes.FETCH_TASKS_START,\n});\n\nexport const fetchTasksSuccess = data => ({\n    type: tasksActionTypes.FETCH_TASKS_SUCCESS,\n    payload: data\n});\n\nexport const fetchTasksFailure = err => ({\n    type: tasksActionTypes.FETCH_TASKS_FAILURE,\n    payload: err\n});\n\n\nexport const addTaskStart = (task) => ({\n    type: tasksActionTypes.ADD_TASK_START,\n    payload: task\n});\n\nexport const addTaskSuccess = (data) => ({\n    type: tasksActionTypes.ADD_TASK_SUCCESS,\n    payload: data\n});\n\nexport const addTaskFailure = err => ({\n    type: tasksActionTypes.ADD_TASK_FAILURE,\n    payload: err\n});\n\n\n\n\n\n","import {takeLatest, call, all, put} from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport {tasksActionTypes} from '../tasks/tasks.types';\nimport {fetchTasksSuccess, fetchTasksFailure, addTaskSuccess, addTaskFailure} from '../tasks/tasks.actions';\n\n\nexport function* fetchTasksAsync() {\n    try {\n        const response = yield fetch('/api/list');\n        const data = yield response.json();\n        console.log (\n            'data ', data ,\n        );\n        yield put(fetchTasksSuccess(data.data));\n\n    } catch (error) {\n        yield put(fetchTasksFailure(error.message));\n    }\n}\n\nexport function* fetchTasksStart() {\n    yield takeLatest(tasksActionTypes.FETCH_TASKS_START, fetchTasksAsync);\n}\n\n\nexport function* addTaskAsync({task}) {\n\n    try {\n        const response = yield fetch('/api/list');\n        const data = yield response.json();\n        console.log (\n            'data ', data ,\n        );\n        yield put(addTaskSuccess(data.data));\n\n    } catch (error) {\n        yield put(addTaskFailure(error.message));\n    }\n}\n\nexport function* addTaskStart() {\n    yield takeLatest(tasksActionTypes.ADD_TASK_START, addTaskAsync);\n}\n\n\n\n\nexport function* tasksSagas() {\n    yield all([\n        call(fetchTasksStart),\n        call(addTaskStart),\n    ]);\n}","import {all, call} from 'redux-saga/effects';\nimport {tasksSagas} from './tasks/tasks.sagas';\n\nexport default function* rootSaga() {\n    yield all([\n        call(tasksSagas),\n    ]);\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middlewares)));\n\nsagaMiddleware.run(rootSaga);\n\n","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => {\n    return (\n        <footer className='footer'>\n            <div className=\"section-wrapper h-100 d-flex align-items-center\">\n                © 2019 АО \"Мегаполис\"\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport './button.scss';\n\nconst Button = ({type = 'text', onClick, text, view = 'green', className = ''}) => {\n    return (\n        <button type={type} onClick={onClick} className={`button button_${view} ${className}` }>\n            {text}\n        </button>\n    );\n};\n\nexport default Button;\n","import {createSelector} from 'reselect';\n\nconst selectTasks = state => state.tasks;\n\nexport const selectTasksItems = createSelector(\n    [selectTasks],\n    (tasks) => tasks.tasks\n);\n\nexport const selectTasksFetching = createSelector(\n    [selectTasks],\n    (tasks) => tasks.isFetching\n);\n\n","import React from 'react';\n\nconst Cross = ({color}) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\">\n            <style>{`.st0{fill: ${color}`}</style>\n            <path\n                d=\"M8.207 7.5L14.853.854c.195-.195.195-.512 0-.707s-.512-.195-.707 0L7.5 6.793.854.146C.659-.049.342-.049.147.146s-.195.512 0 .707L6.793 7.5.147 14.146a.5003.5003 0 000 .707c.097.098.225.147.353.147s.256-.049.354-.146L7.5 8.207l6.646 6.646c.098.098.226.147.354.147s.256-.049.354-.146a.5003.5003 0 000-.707L8.207 7.5z\"\n            />\n        </svg>\n    );\n};\n\nexport default Cross;\n","import React from 'react';\n\nexport const Can = ({color}) => {\n    return (\n        <svg version=\"1.1\" id=\"Слой_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" width=\"17.824\" height=\"22\"\n            xmlSpace=\"preserve\">\n            <style>{`.st0{fill: ${color}`}</style>\n            <path className=\"st0\"\n                d=\"M7.042 7.265c-.276 0-.5.224-.5.5v10.353c0 .276.224.5.5.5s.5-.224.5-.5V7.765c0-.277-.224-.5-.5-.5zM10.854 7.265c-.276 0-.5.224-.5.5v10.353c0 .276.224.5.5.5s.5-.224.5-.5V7.765c0-.277-.224-.5-.5-.5z\"/>\n            <path className=\"st0\"\n                d=\"M17.324 4.029h-2.665c-.174-.087-.363-.147-.571-.147h-1.294V2.588C12.794 1.159 11.635 0 10.206 0H7.618c-1.43 0-2.589 1.159-2.589 2.588v1.294H3.735c-.208 0-.397.06-.571.147H.5c-.276 0-.5.224-.5.5s.224.5.5.5h1.971c-.006.051-.03.095-.03.147v15.529c0 .716.58 1.295 1.294 1.295h10.353c.715 0 1.294-.579 1.294-1.294V5.176c0-.052-.024-.097-.03-.147h1.971c.276 0 .5-.224.5-.5s-.223-.5-.499-.5zM6.029 2.588C6.029 1.712 6.742 1 7.618 1h2.588c.875 0 1.588.712 1.588 1.588v1.294H6.029V2.588zm8.353 18.118c0 .162-.132.294-.294.294H3.735a.2945.2945 0 01-.294-.294V5.176c0-.057.032-.102.061-.147h1.527v.147h7.765v-.147h1.527c.029.045.061.09.061.147v15.53z\"/>\n        </svg>\n    );\n};","import React from 'react';\n\nconst Pen = ({color}) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"23\" height=\"23\">\n            <path\n                d=\"M22.553 4.959L18.027.428c-.55-.551-1.509-.552-2.062 0L1.291 15.089a.4955.4955 0 00-.14.274L.006 22.421c-.025.158.027.32.141.434a.5013.5013 0 00.436.138l7.025-1.173a.5036.5036 0 00.271-.14c3.798-3.801 5.593-5.591 7.404-7.396l.211-.212c1.741-1.735 3.525-3.515 7.005-7.006.294-.219.47-.549.498-.93.03-.428-.135-.868-.444-1.177zM1.105 21.892l1.008-6.21.19-.189c.023.044.046.089.083.126l5.06 5.081-.161.161-6.18 1.031zm13.682-8.526l-.211.211c-1.645 1.64-3.295 3.285-6.424 6.416l-5.058-5.079c-.038-.038-.083-.062-.128-.085L13.232 4.573l5.231 5.125c-1.508 1.507-2.601 2.597-3.676 3.668zm7.059-7.052c-1.031 1.032-1.901 1.902-2.677 2.678l-5.231-5.125 2.734-2.731c.175-.175.475-.173.647 0l4.526 4.531c.103.103.163.26.152.4-.005.088-.038.156-.151.247z\"\n                fill={color}/>\n        </svg>\n    );\n};\n\nexport default Pen;","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport './task-table.scss';\nimport {selectTasksItems} from '../../redux/tasks/tasks.selectors';\nimport Cross from '../../icons/cross';\nimport {Can} from '../../icons/can';\nimport Pen from '../../icons/pen';\n\n\n\nconst TaskTable = () => {\n\n    const tasks = useSelector(selectTasksItems);\n\n\n    return (\n\n        <div>\n            <table className='task-table'>\n                <tbody>\n                    {\n                        tasks &&\n                    tasks.map((task, i) => (\n                        <tr key={i}>\n                            <td className='task-table__id'>\n                                Задача №{task.id}\n                            </td>\n                            <td className='task-table__title'>\n                                {task.title}\n                            </td>\n                            <td>\n                                <Cross/>\n                                <Can/>\n                                <Pen/>\n                            </td>\n\n                        </tr>\n                    ))\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default TaskTable;\n","import React from 'react';\nimport SpinnerImg from '../../assets/img/spinner-dark.svg';\nimport './spinner.scss';\n\nconst Spinner = () => {\n    return (\n        <div style={{textAlign: 'center'}}>\n            <img src={SpinnerImg} alt=\"spinner\"/>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport Spinner from './Spinner';\n\n\nconst WithSpinner = WrappedComponent => {\n    const SpinnerBlock = ({isLoading, ...otherProps}) => {\n        return isLoading ? (\n            <Spinner/>\n        ) : (\n            <WrappedComponent {...otherProps}/>\n        );\n    };\n    return SpinnerBlock;\n};\n\nexport default WithSpinner;","import React, {useEffect} from 'react';\nimport './homepage.scss';\n\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport Button from '../../components/Button/Button';\nimport TaskTable from '../../components/TaskTable/TaskTable';\nimport {fetchTasksStart} from '../../redux/tasks/tasks.actions';\nimport {selectTasksFetching} from '../../redux/tasks/tasks.selectors';\nimport WithSpinner from '../../components/WithSpinner/WithSpinner';\n\nconst Homepage = () => {\n\n    const dispatch = useDispatch();\n    const isFetching = useSelector(selectTasksFetching);\n\n    const TaskTableWithSpinner = WithSpinner(TaskTable);\n\n    useEffect(() => {\n        dispatch(fetchTasksStart());\n    }, [dispatch]);\n\n\n    return (\n        <div className='homepage'>\n            <div className=\"homepage__upper-row\">\n                <h1>Список задач</h1>\n                <Button className='ml-auto' text='Добавить' view='green'/>\n            </div>\n            <TaskTableWithSpinner isLoading={isFetching}/>\n        </div>\n    );\n};\n\nexport default Homepage;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Footer from './components/Footer/Footer';\nimport Homepage from './pages/Homepage/Homepage';\n\n\nfunction App() {\n    return (\n        <div className='site'>\n            <div className='content'>\n                <Switch>\n                    <Route exact path='/' component={Homepage}/>\n                </Switch>\n            </div>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport './assets/styles/normalize.scss';\nimport './assets/styles/fonts.scss';\nimport './assets/styles/helpers.scss';\nimport './assets/styles/bootstrap-custom.scss';\n\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nimport {store} from './redux/store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n\n/*\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {store, persistor} from \"./redux/store\"\n\nimport {BrowserRouter} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport {PersistGate} from \"redux-persist/integration/react\"\n\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <PersistGate persistor={persistor}>\n                <App/>\n            </PersistGate>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n*/\n"],"sourceRoot":""}